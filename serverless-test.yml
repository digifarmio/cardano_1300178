# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ${env:SERVERLESS_ORG}
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: digifarm-blockia
# "service" is the name of this project. This will also be added to your AWS resource names.
service: digifarm-blockia

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  timeout: 300 # Add this line - global default timeout (5 minutes)
  role: LambdaExecutionRole
  httpApi:
    cors:
      allowedOrigins:
        - ${env:DOMAIN}
        - http://localhost:5173
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Requested-With
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true
  environment:
    NODE_ENV: ${env:NODE_ENV, 'development'} # Auto detect environment
    NMKR_API_KEY: ${env:NMKR_API_KEY, 'key-local-dev'} # Default for local
    NMKR_BASE_URL: ${env:NMKR_BASE_URL, 'https://studio-api.preprod.nmkr.io'} # NMKR staging URL
    NMKR_PROJECT_UID: ${env:NMKR_PROJECT_UID} # NMKR Project id
    RECEIVER_ADDRESS: ${env:RECEIVER_ADDRESS} # Wallet address
    BLOCKCHAIN: ${env:BLOCKCHAIN, 'Cardano'} # Blockchain
    MAX_MINT_LIMIT: ${env:MAX_MINT_LIMIT, 10} # Safe default batch total
    CONCURRENCY_LIMIT: ${env:CONCURRENCY_LIMIT, 5}
    RETRY_COUNT: ${env:RETRY_COUNT, 3}
    AWS_S3_BUCKET:
      Ref: ReportsBucket # Reference to the first S3 bucket
    AWS_DYNAMO_TABLE_RECORDS_STATUS:
      Ref: ReportsTable
    AWS_SQS_UPLOADS_QUEUE_URL:
      Ref: UploadQueue # Default queue URL
    AWS_SQS_REPORT_QUEUE_URL:
      Ref: ReportQueue # Default queue URL
    SFTP_HOST: ${env:SFTP_HOST, ''} # Default SFTP host
    SFTP_PORT: ${env:SFTP_PORT, '22'} # Default SFTP port
    SFTP_USERNAME: ${env:SFTP_USERNAME, ''} # Default SFTP username
    SFTP_PASSWORD: ${env:SFTP_PASSWORD, ''} # Default SFTP password
    REMOTE_PATH: ${env:REMOTE_PATH, ''} # Defau
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_ISSUER: ${env:JWT_ISSUER}
    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN}
plugins:
  - serverless-offline
    
build:
  esbuild:
    bundle: true
    target: node20
    platform: node

functions:
  api:
    handler: .build/src/handler.handler
    events:
      - httpApi: '*'

  processNfts:
    handler: .build/src/SqsLambdaHandler.lambdaHandler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - UploadQueue
              - Arn

  reportProcessor:
    handler: .build/src/report-handler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ReportQueue
              - Arn
          batchSize: 1          

resources:
  Resources:
    UploadQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: digifarm-blockia-upload-queue.fifo 
        FifoQueue: true
        VisibilityTimeout: 310
        ContentBasedDeduplication: true
        FifoThroughputLimit: perMessageGroupId
        DeduplicationScope: messageGroup
        DelaySeconds: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - UploadDeadLetterQueue
              - Arn
          maxReceiveCount: 12

    UploadDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: digifarm-blockia-upload-queue-dlq.fifo
        FifoQueue: true
        VisibilityTimeout: 310
        DelaySeconds: 60
        ContentBasedDeduplication: true
        MessageRetentionPeriod: 1209600

    ReportQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: digifarm-blockia-report-queue
        VisibilityTimeout: 310
        DelaySeconds: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - ReportDeadLetterQueue
              - Arn
          maxReceiveCount: 12

    ReportDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: digifarm-blockia-report-queue-dlq
        VisibilityTimeout: 310
        DelaySeconds: 60
        MessageRetentionPeriod: 1209600    

    ReportsBucket: 
      Type: AWS::S3::Bucket
      Properties:
        BucketName: digifarm-blockia-reports
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false

    ReportsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ReportsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "Statement1"
              Effect: "Allow"
              Principal: "*"
              Action: "s3:*"
              Resource:
                - !Sub "arn:aws:s3:::${ReportsBucket}/*"      

    NftsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: digifarm-blockia-nfts
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false

    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: digifarm-blockia-files
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
    
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonSQSFullAccess
          - arn:aws:iam::aws:policy/CloudWatchFullAccess
    
    ReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: digifarm-blockia-records-status
        BillingMode: PAY_PER_REQUEST  
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH 
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: false